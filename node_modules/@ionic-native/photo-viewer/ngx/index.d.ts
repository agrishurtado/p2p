import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface PhotoViewerOptions {
    /**
     * Set to false to disable the share button (Android only). Default: true
     */
    share?: boolean;
    /**
     * Add HTTP headers to the request.  Useful for authenticated pages.
     * The value is a string in a JSON format.  Default: ''
     */
    headers?: string;
    /**
     * Option for close button visibility when share false [ONLY FOR iOS]
     */
    closeButton?: boolean;
    /**
     * If you need to copy image to reference before show then set it true [ONLY FOR iOS]
     */
    copyToReference?: boolean;
    /**
     * Enable or Disable Picasso Options ( Only Android ): fit, centerInside, centerCrop.
     */
    piccasoOptions?: {
        fit?: boolean;
        centerInside?: boolean;
        centerCrop?: boolean;
    };
}
/**
 * @name Photo Viewer
 * @description This plugin can display your image in full screen with the ability to pan, zoom, and share the image.
 * @usage
 * ```typescript
 * import { PhotoViewer } from '@ionic-native/photo-viewer/ngx';
 *
 * constructor(private photoViewer: PhotoViewer) { }
 *
 * ...
 *
 * this.photoViewer.show('https://mysite.com/path/to/image.jpg');
 *
 * this.photoViewer.show('https://mysite.com/path/to/image.jpg', 'My image title', {share: false});
 *
 * this.photoViewer.show('https://mysecuresite.com/path/to/image.jpg', 'My image title', {share: false, headers: '{username:foo,password:bar}'});
 * ```
 */
export declare class PhotoViewer extends IonicNativePlugin {
    /**
     * Shows an image in full screen
     * @param url {string} URL or path to image
     * @param title {string}
     * @param options {PhotoViewerOptions}
     */
    show(url: string, title?: string, options?: PhotoViewerOptions): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PhotoViewer, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PhotoViewer>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmV4cG9ydCBpbnRlcmZhY2UgUGhvdG9WaWV3ZXJPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0aGUgc2hhcmUgYnV0dG9uIChBbmRyb2lkIG9ubHkpLiBEZWZhdWx0OiB0cnVlXG4gICAgICovXG4gICAgc2hhcmU/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEFkZCBIVFRQIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3QuICBVc2VmdWwgZm9yIGF1dGhlbnRpY2F0ZWQgcGFnZXMuXG4gICAgICogVGhlIHZhbHVlIGlzIGEgc3RyaW5nIGluIGEgSlNPTiBmb3JtYXQuICBEZWZhdWx0OiAnJ1xuICAgICAqL1xuICAgIGhlYWRlcnM/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogT3B0aW9uIGZvciBjbG9zZSBidXR0b24gdmlzaWJpbGl0eSB3aGVuIHNoYXJlIGZhbHNlIFtPTkxZIEZPUiBpT1NdXG4gICAgICovXG4gICAgY2xvc2VCdXR0b24/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIElmIHlvdSBuZWVkIHRvIGNvcHkgaW1hZ2UgdG8gcmVmZXJlbmNlIGJlZm9yZSBzaG93IHRoZW4gc2V0IGl0IHRydWUgW09OTFkgRk9SIGlPU11cbiAgICAgKi9cbiAgICBjb3B5VG9SZWZlcmVuY2U/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZSBvciBEaXNhYmxlIFBpY2Fzc28gT3B0aW9ucyAoIE9ubHkgQW5kcm9pZCApOiBmaXQsIGNlbnRlckluc2lkZSwgY2VudGVyQ3JvcC5cbiAgICAgKi9cbiAgICBwaWNjYXNvT3B0aW9ucz86IHtcbiAgICAgICAgZml0PzogYm9vbGVhbjtcbiAgICAgICAgY2VudGVySW5zaWRlPzogYm9vbGVhbjtcbiAgICAgICAgY2VudGVyQ3JvcD86IGJvb2xlYW47XG4gICAgfTtcbn1cbi8qKlxuICogQG5hbWUgUGhvdG8gVmlld2VyXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gY2FuIGRpc3BsYXkgeW91ciBpbWFnZSBpbiBmdWxsIHNjcmVlbiB3aXRoIHRoZSBhYmlsaXR5IHRvIHBhbiwgem9vbSwgYW5kIHNoYXJlIHRoZSBpbWFnZS5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUGhvdG9WaWV3ZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3Bob3RvLXZpZXdlci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgcGhvdG9WaWV3ZXI6IFBob3RvVmlld2VyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnBob3RvVmlld2VyLnNob3coJ2h0dHBzOi8vbXlzaXRlLmNvbS9wYXRoL3RvL2ltYWdlLmpwZycpO1xuICpcbiAqIHRoaXMucGhvdG9WaWV3ZXIuc2hvdygnaHR0cHM6Ly9teXNpdGUuY29tL3BhdGgvdG8vaW1hZ2UuanBnJywgJ015IGltYWdlIHRpdGxlJywge3NoYXJlOiBmYWxzZX0pO1xuICpcbiAqIHRoaXMucGhvdG9WaWV3ZXIuc2hvdygnaHR0cHM6Ly9teXNlY3VyZXNpdGUuY29tL3BhdGgvdG8vaW1hZ2UuanBnJywgJ015IGltYWdlIHRpdGxlJywge3NoYXJlOiBmYWxzZSwgaGVhZGVyczogJ3t1c2VybmFtZTpmb28scGFzc3dvcmQ6YmFyfSd9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQaG90b1ZpZXdlciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBTaG93cyBhbiBpbWFnZSBpbiBmdWxsIHNjcmVlblxuICAgICAqIEBwYXJhbSB1cmwge3N0cmluZ30gVVJMIG9yIHBhdGggdG8gaW1hZ2VcbiAgICAgKiBAcGFyYW0gdGl0bGUge3N0cmluZ31cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7UGhvdG9WaWV3ZXJPcHRpb25zfVxuICAgICAqL1xuICAgIHNob3codXJsOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvcHRpb25zPzogUGhvdG9WaWV3ZXJPcHRpb25zKTogdm9pZDtcbn1cbiJdfQ==